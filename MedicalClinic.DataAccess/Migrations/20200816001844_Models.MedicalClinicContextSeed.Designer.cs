// <auto-generated />
using System;
using MedicalClinic.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MedicalClinic.DataAccess.Migrations
{
    [DbContext(typeof(MedicalClinicDBContext))]
    [Migration("20200816001844_Models.MedicalClinicContextSeed")]
    partial class ModelsMedicalClinicContextSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MedicalClinic.Models.Entities.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AppointmentTypeId");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsCancelled");

                    b.Property<string>("Notes");

                    b.Property<long>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AppointmentTypeId = 1L,
                            Date = new DateTime(2020, 8, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            Notes = "Consulta general",
                            PatientId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AppointmentTypeId = 2L,
                            Date = new DateTime(2020, 8, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            Notes = "Consulta general dientes",
                            PatientId = 2L
                        });
                });

            modelBuilder.Entity("MedicalClinic.Models.Entities.AppointmentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Medicina General"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Odontología"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Pediatría"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Neurología"
                        });
                });

            modelBuilder.Entity("MedicalClinic.Models.Entities.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<long>("IdentificationNumber");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FirstName = "Juan",
                            IdentificationNumber = 1234L,
                            LastName = "Perez"
                        },
                        new
                        {
                            Id = 2L,
                            FirstName = "David",
                            IdentificationNumber = 12345L,
                            LastName = "Trochez"
                        });
                });

            modelBuilder.Entity("MedicalClinic.Models.Entities.Appointment", b =>
                {
                    b.HasOne("MedicalClinic.Models.Entities.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalClinic.Models.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
